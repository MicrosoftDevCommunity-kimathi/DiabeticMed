using System;
using System.Collections.Generic;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
namespace DiabeticMed.Models
{

    // <auto-generated />
    //
    // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
    //
    //    using QuickType;
    //
    //    var temperatures = Patients.FromJson(jsonString);
    public partial class Patients
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("pregnanicies")]
        public long Pregnanicies { get; set; }

        [JsonProperty("plasmaGlucose")]
        public long PlasmaGlucose { get; set; }

        [JsonProperty("diasotolicBloodPressure")]
        public long DiasotolicBloodPressure { get; set; }

        [JsonProperty("tricepThickness")]
        public long TricepThickness { get; set; }

        [JsonProperty("seruminium")]
        public long Seruminium { get; set; }

        [JsonProperty("bMi")]
        public long BMi { get; set; }

        [JsonProperty("diabeticPadiac")]
        public long DiabeticPadiac { get; set; }

        [JsonProperty("age")]
        public long Age { get; set; }

        [JsonProperty("diabetic")]
        public double Diabetic { get; set; }

        [JsonProperty("isdiabetic")]
        public bool Isdiabetic { get; set; }
    }

    public partial class Patients
    {
        public static List<Patients> FromJson(string json) => JsonConvert.DeserializeObject<List<Patients>>(json, DiabeticMed.Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<Patients> self) => JsonConvert.SerializeObject(self, DiabeticMed.Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
